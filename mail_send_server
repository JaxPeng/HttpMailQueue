#!/usr/bin/env python
#encoding=UTF8
#code by Jax
#2014-9-23

'''
Mail queue
'''

import sys 
import os
import time
import json
import random
import sqlite3
import smtplib,sys 
from email.mime.text import MIMEText

import tornado.ioloop
import tornado.web

from multiprocessing import Process
 
def daemon(stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'): 
    try: 
        pid = os.fork() 
        if pid > 0: 
            sys.exit(0) 
    except OSError, e: 
        sys.stderr.write("fork #1 failed: (%d) %s\n" % (e.errorno, e.strerror)) 
        sys.exit(1) 
         
    os.umask(0) 
    os.setsid() 
     
    try: 
        pid = os.fork() 
        if pid > 0: 
            sys.exit(0) 
    except OSError, e: 
        sys.stderr.write("fork #2 failed: (%d) %s\n" % (e.errorno, e.strerror)) 
        sys.exit(1) 
         
    for f in sys.stdout, sys.stderr: 
        f.flush() 
     
    si = file(stdin, 'r') 
    so = file(stdout, 'a+') 
    se = file(stderr, 'a+', 0) 
    os.dup2(si.fileno(), sys.stdin.fileno()) 
    os.dup2(so.fileno(), sys.stdout.fileno()) 
    os.dup2(se.fileno(), sys.stderr.fileno())


def send_mail(email,sub,content, userconfig): 
    
	mailto_list=[email] 
    smtp_host=userconfig['smtp_host']
    smtp_user=userconfig['smtp_user']
    smtp_password=userconfig['smtp_password']
    me = userconfig['mail_sender']+"<"+smtp_user+">"
    msg = MIMEText(content,'html') 
    msg.set_charset('utf-8')
    msg['Subject'] = sub 
    msg['From'] = me 
    msg['To'] = ";".join(mailto_list) 
    
	try:
        s = smtplib.SMTP() 
        s.connect(smtp_host) 
        s.login(smtp_user,smtp_password) 
        s.sendmail(me, mailto_list, msg.as_string()) 
        s.close() 
        return 'OK'
    except Exception, e: 
        return str(e)

def db_connect():
    cx = sqlite3.connect("mail_queue.db")
    cu=cx.cursor()
    cu.execute("CREATE TABLE IF NOT EXISTS mail_list ([mail_id] INTEGER PRIMARY KEY, [receiver] TEXT, [status] INTEGER, [info] TEXT, [title] TEXT, [content] TEXT)")
    cx.commit()
    return cx

def process_mail_queue(pid_file, userconfig):
    pid = os.getpid()
    open(pid_file, 'a+').write(str(pid)+'\n')
    print 'Start mail queue processer(pid=%s)' % pid

    cx = db_connect()
    cx.row_factory = sqlite3.Row
    cu=cx.cursor()
    while True:
        try:
            cu.execute("SELECT * FROM mail_list WHERE status=0 ORDER BY mail_id ASC")
            for row in cu.fetchall():
                try:
                    msg = send_mail(row['receiver'], row['title'], row['content'], userconfig);
                except Exception, ex:
                    msg = str(ex)
                status = 1 if msg == 'OK' else 2
                t = (status, msg, row['mail_id'])
                cu.execute("UPDATE mail_list SET status=?, info=? WHERE mail_id=?", t)
                cx.commit()
        except Exception, ex:
            print ex
        time.sleep(1)

class MailHandler(tornado.web.RequestHandler):

    def post(self):
        receiver = self.get_argument('receiver', None)
        title = self.get_argument('title', None)
        content = self.get_argument('content', '')
        if receiver is None or title is None:
            return self.write("ERROR")

        mail_id = int(time.time())+random.randint(0,100)
        cx = db_connect()
        cu=cx.cursor()
        t = (mail_id, receiver, title, content)
        cu.execute("INSERT INTO mail_list (mail_id, receiver, status, info, title, content) VALUES (?, ?, '0', '', ?, ?)", t)
        cx.commit()

        self.set_header("Content-Type", "application/json")
        self.write(json.dumps({'status': 'OK', 'mail_id': mail_id}))

    def get(self):
        receiver = self.get_argument('receiver', None)
        status = self.get_argument('status', None)
        
        cx = db_connect()
        cx.row_factory = sqlite3.Row
        cu=cx.cursor()

        if receiver is None:
            if status is None:
                cu.execute("SELECT *  FROM mail_list");
            else:
                t = (status,)
                cu.execute("SELECT *  FROM mail_list WHERE status=?", t);
        else:
            t = (receiver,)
            cu.execute("SELECT *  FROM mail_list WHERE receiver=?", t)
        data = [dict(x) for x in cu.fetchall()]

        self.set_header("Content-Type", "application/json")
        self.write(json.dumps(data))

class InfoHandler(tornado.web.RequestHandler):

    def get(self):
        cx = db_connect()
        cx.row_factory = sqlite3.Row
        cu=cx.cursor()
        #all
        cu.execute("SELECT COUNT(*) AS num FROM mail_list")
        total_res = cu.fetchone()
        #watting
        cu.execute("SELECT COUNT(*) AS num FROM mail_list WHERE status=0")
        watting = cu.fetchone()
        #has send
        cu.execute("SELECT COUNT(*) AS num FROM mail_list WHERE status=1")
        has_send = cu.fetchone()
        #error
        cu.execute("SELECT COUNT(*) AS num FROM mail_list WHERE status=2")
        error_mail = cu.fetchone()

        data = {
            'total': total_res['num'],
            'watting': watting['num'],
            'has_send': has_send['num'],
            'error': error_mail['num']
        }
        self.set_header("Content-Type", "application/json")
        self.write(json.dumps(data))

def start_http_server(pid_file, userconfig):
    pid = os.getpid()
    open(pid_file, 'a+').write(str(pid)+'\n')
    print 'Start http server(pid=%s)' % pid

    application = tornado.web.Application([
        (r"/mail", MailHandler),
        (r"/info", InfoHandler),
    ])
    application.listen(int(userconfig['http_bind_port']), userconfig['http_bind_ip'])
    tornado.ioloop.IOLoop.instance().start()

def userconfig_parse(config_file):
    userconfig = dict()
    for line in open(config_file, 'r'):
        if line.startswith('#'):
            continue
        try:
            key,value = [x.strip() for x in line.split('=') if len(x[0]) > 0 and len(x[1]) > 0]
            userconfig[key] = value
        except Exception, ex:
            pass
    return userconfig

if __name__ == "__main__":
    
    pid_file = '/tmp/mail_send.pid'

    arg = None
    arg1 = None

    try:
        arg0 = sys.argv[0]
        arg1 = sys.argv[1]
    except Exception, ex:
        pass

    if arg0 == 'stop' or arg1 == 'stop':
        if os.path.exists(pid_file):
            for line in open(pid_file, 'r'):
                pid = line.replace('\n', '')
                os.system("kill -9 %s" % pid)
                print 'Process: %s killed' % pid
            os.remove(pid_file)
        else:
            print 'Server is not running.'
    else:
        config_file = None
        for arg in sys.argv:
            if arg.endswith('.conf'):
                config_file = arg

        if config_file is None:
            print 'ERROR: Do not specify a configuration file.'
            sys.exit(1)
        
        userconfig = None
        try:
            userconfig = userconfig_parse(config_file)
        except Exception, ex:
            print ex
            sys.exit(1)

        if os.path.exists(pid_file):
            print 'Server is running.'
            sys.exit(1)

        try:
            os.remove(pid_file)
        except Exception, ex:
            pass

        if 'daemon' in userconfig and userconfig['daemon'] == 'true':
            
            if 'log' in userconfig:
                stdout = userconfig['log']
            else:
                stdout = '/dev/null'
            if 'error_log' in userconfig:
                stderr = userconfig['error_log']
            else:
                stdout = '/dev/null'

            daemon(stdout=stdout, stderr=stderr)

        pid = os.getpid()
        open(pid_file, 'a+').write(str(pid)+'\n')

        p = Process(target=start_http_server, args=(pid_file, userconfig))
        p.start()
        
        p2 = Process(target=process_mail_queue, args=(pid_file, userconfig))
        p2.start()

        p.join()
        p2.join()
